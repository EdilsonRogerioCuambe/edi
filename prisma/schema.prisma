generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid()) @map("_id")
  name          String
  role          Role      @default(USER)
  email         String?   @unique
  description   String?
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  projects      Project[]

  @@map("users")
}

model Account {
  id                String   @id @default(uuid()) @map("_id")
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid()) @map("_id")
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(uuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

model Post {
  id        String   @id @default(uuid()) @map("_id")
  image     String?
  title     String
  slug      String   @unique
  shortDesc String
  views     Int      @default(0)
  content   String
  published Boolean  @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tags      Tag[]

  @@map("posts")
}

model Tag {
  id        String   @id @default(uuid()) @map("_id")
  name      String   @unique
  slug      String   @unique
  published Boolean  @default(false)
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tags")
}

model Project {
  id          String   @id @default(uuid()) @map("_id")
  title       String
  slug        String   @unique
  shortDesc   String
  description String
  github      String?
  views       Int      @default(0)
  demo        String?
  languages   String[]
  image       String
  author      User?    @relation(fields: [authorId], references: [id])
  authorId    String?
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("projects")
}
